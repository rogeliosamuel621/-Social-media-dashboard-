{"version":3,"sources":["img/icon-facebook.svg","img/icon-instagram.svg","img/icon-youtube.svg","img/icon-twitter.svg","img/flecha-hacia-arriba.svg","img/flecha-hacia-arriba-red.svg","Components/DashboardCard.jsx","Containers/DashBoard.jsx","Components/OverviewCard.jsx","Containers/Overview.jsx","pages/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","DashboardCard","props","colorTheme","name","today","Followers","isOk","icon","className","src","alt","GreenArrow","RedArrow","width","height","DashBoard","changeThemeColor","type","onClick","FB","Insta","Twitter","YT","OverviewCard","views","porcent","Overview","style","color","isOK","App","state","switcher","bind","this","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d05bc1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-facebook.a7383764.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-instagram.991487fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-youtube.8499da12.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-twitter.810ccee8.svg\";","module.exports = __webpack_public_path__ + \"static/media/flecha-hacia-arriba.7bb5bdb8.svg\";","module.exports = __webpack_public_path__ + \"static/media/flecha-hacia-arriba-red.b47045cd.svg\";","import React from 'react';\r\nimport '../Styles/dashboardCard.css';\r\n\r\nimport GreenArrow from '../img/flecha-hacia-arriba.svg';\r\nimport RedArrow from '../img/flecha-hacia-arriba-red.svg';\r\n\r\n\r\nconst DashboardCard = (props) => {\r\n\r\n    const { colorTheme, name, today, Followers, isOk, icon } = props\r\n\r\n    return(\r\n        <div className={colorTheme ? 'Card-containerWhite' : 'Card-containerDark'}>\r\n            <div className=\"Me\">\r\n                <p><img src={icon} alt=\"Facebook icon\"/>  @{name}</p>\r\n            </div>\r\n            <div className=\"Followers\">\r\n                <p><strong>{Followers}</strong> <br/> F O L L O W E R S</p>\r\n            </div>\r\n            <div className=\"today\">\r\n                <img src={isOk ? GreenArrow : RedArrow} alt=\"arrow\" width=\"10px\" height=\"10px\"/>\r\n                <p className={isOk ? 'green Follower-status' : 'red Follower-status'}>{today}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashboardCard;","import React from 'react';\r\nimport '../Styles/dashBoard.css'\r\n\r\nimport DashboardCard from '../Components/DashboardCard'\r\nimport FB from '../img/icon-facebook.svg';\r\nimport Insta from '../img/icon-instagram.svg';\r\nimport YT from '../img/icon-youtube.svg';\r\nimport Twitter from '../img/icon-twitter.svg';\r\n\r\n\r\nconst DashBoard = (props) => {\r\n    const { changeThemeColor, colorTheme} = props;\r\n    return(\r\n        <>\r\n            <div className={colorTheme ? \"WhiteMode-Container\" : \"DarkMode-container\"}>\r\n                <div>\r\n                    <h1 className={colorTheme ? \"Logo h1\" : \"Logo h1-dark\"}>Social Media Dashboard</h1>\r\n                    <p className={colorTheme ? \"Logo white\" : \"Logo dark\"}>Total Followers: 25</p>\r\n                </div>\r\n                <div className=\"switcher\">\r\n                    <div>\r\n                        <p>Dark mode</p>\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"switch\">\r\n                            <input type=\"checkbox\" onClick={changeThemeColor}/>\r\n                            <span className=\"slider round\"></span>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"Cards-container\">\r\n                <div>\r\n                    <DashboardCard\r\n                        colorTheme={colorTheme}\r\n                        name=\"rogeliosamuel621\"\r\n                        today=\"12\"\r\n                        Followers=\"25\"\r\n                        icon={FB}\r\n                        isOk=\"true\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <DashboardCard\r\n                        colorTheme={colorTheme}\r\n                        name=\"rogeliosamuel621\"\r\n                        today=\"99\"\r\n                        Followers=\"25\"\r\n                        icon={Insta}\r\n                        isOk=\"true\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <DashboardCard\r\n                        colorTheme={colorTheme}\r\n                        name=\"RogelioSamuel2\"\r\n                        today=\"1099\"\r\n                        Followers=\"25\"\r\n                        icon={Twitter}\r\n                        isOk=\"true\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <DashboardCard\r\n                        colorTheme={colorTheme}\r\n                        name=\"rogeliosamuel621\"\r\n                        today=\"144\"\r\n                        Followers=\"25\"\r\n                        icon={YT}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DashBoard;","import React from 'react';\r\nimport '../Styles/overviewCard.css';    \r\n\r\nimport GreenArrow from '../img/flecha-hacia-arriba.svg';\r\nimport RedArrow from '../img/flecha-hacia-arriba-red.svg';\r\nconst OverviewCard = (props) => {\r\n    const { icon, views, porcent, isOk } = props;\r\n    return(\r\n        <div className=\"OverviewCard-container\">\r\n            <div>\r\n                <p className=\"page-views\">Page Views</p>\r\n                <img src={icon} alt=\"icon\" width=\"20px\" height=\"20px\"/>\r\n            </div>\r\n            <div>\r\n                <h2 className=\"numberOfViews\">{views}</h2>\r\n                <div className=\"today\">\r\n                    <img src={isOk ? GreenArrow : RedArrow} alt=\"\" width=\"10px\" height=\"10px\"/>\r\n                    <p className={isOk ? 'green p' : 'red p'}>{porcent}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OverviewCard;","import React from 'react';\r\nimport OverviewCard from '../Components/OverviewCard';\r\nimport '../Styles/Overview.css'\r\n\r\nimport FB from '../img/icon-facebook.svg';\r\nimport Insta from '../img/icon-instagram.svg'\r\nimport YT from '../img/icon-youtube.svg'\r\nimport Twitter from '../img/icon-twitter.svg'\r\n\r\nconst Overview = (props) => {\r\n    const { colorTheme } = props;\r\n    return(\r\n        <div className=\"Overview\">\r\n            <h1 style={{color: '#5f616d'}}>Overview - Today</h1>\r\n            <div className=\"Overview-container\">\r\n                <div className={colorTheme ? 'OverviewCard-white' : 'OverviewCard-dark'}>\r\n                    <OverviewCard\r\n                    icon={FB}\r\n                    views={87}\r\n                    porcent=\"3\"\r\n                    isOk\r\n                />\r\n                </div>\r\n                <div className={colorTheme ? 'OverviewCard-white' : 'OverviewCard-dark'}>\r\n                    <OverviewCard\r\n                    icon={FB}\r\n                    views={52}\r\n                    porcent=\"2\"\r\n                />\r\n                </div>\r\n                <div className={colorTheme ? 'OverviewCard-white' : 'OverviewCard-dark'}>\r\n                    <OverviewCard\r\n                    icon={Insta}\r\n                    views={5462}\r\n                    porcent=\"2257\"\r\n                    isOk\r\n                />\r\n                </div>\r\n                <div className={colorTheme ? 'OverviewCard-white' : 'OverviewCard-dark'}>\r\n                    <OverviewCard\r\n                    icon={Insta}\r\n                    views={'52k'}\r\n                    porcent=\"1375\"\r\n                    isOk\r\n                />\r\n                </div>\r\n                <div className={colorTheme ? 'OverviewCard-white' : 'OverviewCard-dark'}>\r\n                    <OverviewCard\r\n                    icon={Twitter}\r\n                    views={117}\r\n                    porcent=\"303\"\r\n                    isOK\r\n                />\r\n                </div>\r\n                <div className={colorTheme ? 'OverviewCard-white' : 'OverviewCard-dark'}>\r\n                    <OverviewCard\r\n                    icon={Twitter}\r\n                    views={507}\r\n                    porcent=\"553\"\r\n                    isOk\r\n                />\r\n                </div>\r\n                <div className={colorTheme ? 'OverviewCard-white' : 'OverviewCard-dark'}>\r\n                    <OverviewCard\r\n                    icon={YT}\r\n                    views={107}\r\n                    porcent=\"19\"\r\n                />\r\n                </div>\r\n                <div className={colorTheme ? 'OverviewCard-white' : 'OverviewCard-dark'}>\r\n                    <OverviewCard\r\n                    icon={YT}\r\n                    views={1407}\r\n                    porcent=\"12\"\r\n                />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Overview;","import React from 'react';\r\nimport '../Styles/app.css'\r\n\r\nimport Dashboard from '../Containers/DashBoard';\r\nimport Overview from '../Containers/Overview';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            colorTheme: true, //true = whiteMode. False = DarkMode.\r\n        }\r\n        this.switcher = this.switcher.bind(this);\r\n    }\r\n\r\n    switcher() {\r\n        this.setState({\r\n            colorTheme: !this.state.colorTheme,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className={this.state.colorTheme ? 'whiteMode' : 'darkMode'}>\r\n                <div>\r\n                    <Dashboard changeThemeColor={this.switcher} colorTheme={this.state.colorTheme} />\r\n                    <Overview colorTheme={this.state.colorTheme} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}